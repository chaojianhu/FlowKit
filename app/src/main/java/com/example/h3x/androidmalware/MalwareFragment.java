package com.example.h3x.androidmalware;

import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.DialogFragment;
import android.app.usage.UsageStats;
import android.app.usage.UsageStatsManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.TextView;

import com.example.h3x.androidmalware.Malware.FakeActivity;
import com.example.h3x.androidmalware.Malware.ProcessHelper;
import java.util.List;
import java.util.SortedMap;
import java.util.TreeMap;


/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link MalwareFragment.OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link MalwareFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class MalwareFragment extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;
    private OnFragmentInteractionListener mListener;

    public MalwareFragment() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment MalwareFragment.
     */
    // TODO: Rename and change types and number of parameters
    public static MalwareFragment newInstance(String param1, String param2) {
        MalwareFragment fragment = new MalwareFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View v = inflater.inflate(R.layout.fragment_malware, container, false);
        //declaration a final variables of activity_main components
        final TextView logs = v.findViewById(R.id.logs);
        final CheckBox cb = v.findViewById(R.id.checkBox);
        final Button btnAttack = v.findViewById(R.id.button);
        final Button btnLog = v.findViewById(R.id.log);

        final AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this.getActivity());

        // simple dialog message of warning
        alertDialogBuilder.setTitle("WARNING");
        View.OnClickListener attack = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (cb.isChecked()){
                    alertDialogBuilder
                            .setMessage("The author does not bear any responsibility for the consequences, the program only shows the possibilities of a simple deception of a man!")
                            .setCancelable(false)
                            .setPositiveButton("Continue",new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog,int id) {
                                    //if user set the "yes", attack will starting
                                    //TODO
                                    /*DialogFragment dialog2 = new ProcessInfoDialog();
                                    dialog2.show(getFragmentManager(), "HARDWARE");*/
                                }
                            })
                            .setNegativeButton("No",new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    //closing dialog form
                                    dialog.cancel();
                                }
                            });


                    AlertDialog alertDialog = alertDialogBuilder.create();
                    alertDialog.show();
                }
            }
        };
        btnAttack.setOnClickListener(attack); //listener of pressing attack button

        View.OnClickListener log = new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                //TODO
                /**
         * starting a new test activity
         * FakeActivity
         */
                startActivity(new Intent(MalwareFragment.this.getActivity(), FakeActivity.class));

            }
        };
        btnLog.setOnClickListener(log); //listener of pressing log button
        Context context = getContext();

        ActivityManager activitymanager = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);

        List<ActivityManager.RunningAppProcessInfo> RAP = activitymanager.getRunningAppProcesses();

        String topPackageName = "";
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            UsageStatsManager mUsageStatsManager = (UsageStatsManager)context.getSystemService(Context.USAGE_STATS_SERVICE);
            long time = System.currentTimeMillis();
            // We get usage stats for the last 10 seconds
            List<UsageStats> stats = mUsageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_DAILY, time - 1000*10, time);
            // Sort the stats by the last time used
            if(stats != null) {
                SortedMap<Long,UsageStats> mySortedMap = new TreeMap<Long,UsageStats>();
                for (UsageStats usageStats : stats) {
                    mySortedMap.put(usageStats.getLastTimeUsed(),usageStats);
                }
                if(!mySortedMap.isEmpty()) {
                    topPackageName =  mySortedMap.get(mySortedMap.lastKey()).getPackageName();
                }
            }
        }
        logs.setText("Running processes:"+'\n'+topPackageName);

        return v;
    }

    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        void onFragmentInteraction(Uri uri);
    }

    private String printForegroundTask() {
        return ProcessHelper.getForegroundApp();
    }
}
